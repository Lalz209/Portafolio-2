---
import "../styles/global.css";
import NavBar from "../components/Navbar.astro";
import Welcome from "../components/Welcome.astro";
import Switches from "../components/Switches.astro";
import Skills from "../components/Skills.astro";
import Certificates from "../components/Certificates.astro";
import Proyects from "../components/Projects.astro";
import Experience from "../components/Experience.astro";

const InitialMode = "web";
const email = "palacioluismauricio@gmail.com";
const subject = "Contact from Portfolio";
const body = "Hi, I saw your portfolio and would like to get in touch!";
const mailtoLink = `mailto:${email}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
---

<div
  id="container"
  class={`${InitialMode} bg-background min-h-screen font-display`}
>
  <div
    class="section pt-16 md:py-10 scroll-m-20 w-full mx-auto container lg:max-w-4xl md:max-w-2xl"
  >
    <!-- Switches en vertical, a la izquierda en pantallas grandes -->
    <Switches />

    <NavBar InitialMode={InitialMode} />
    <section id="top">
      <div
        id="start"
        class="flex flex-col justify-start items-start gap-3.5 pt-30"
      >
        <div class="flex gap-x-7 ">
          
          <img
            alt="profile"
            class="h-30 rounded-full self-start bg-bg2"
            src="foto2.png"
          />
          <a
            href="https://www.linkedin.com/in/luis-mauricio-palacio-orozco-894896305/"
            target="_blank"
            rel="noopener"
            class="flex items-center transition md:justify-center md:hover:scale-105"
          >
            <div class="flex items-center">
              <span
                class="relative inline-flex overflow-hidden rounded-full p-[1px]"
              >
                <span
                  class="absolute inset-[-1000%] animate-[spin_2s_linear_infinite] bg-[conic-gradient(from_90deg_at_50%_50%,#51E4B8_0%,#21554E_50%,#51E4B8_100%)]"
                ></span>
                <div
                  class="inline-flex items-center justify-center w-full px-3 py-1 text-sm text-span bg-background rounded-full cursor-pointer dark:bg-gray-800 dark:text-white/80 backdrop-blur-3xl whitespace-nowrap"
                >
                  available for hire
                </div>
              </span>
            </div>
          </a>
        </div>
        <h1 id="tittle" class="flex justify-center text-5xl font-bold text-txt">
          Hey, I am Mauricio Palacio
        </h1>
      </div>
      <h3 id="description" class="text-2xl pt-10 w-160 text-txt opacity-85">
        <span class="text-span opacity-100">Software developer</span> from Medellin,
        Colombia, and Living in Guadalajara, Mexico. 2 years of programming training
        and currently developing web projects. I am passionate about <span
          class="text-span opacity-100">software development</span
        > and constantly evolving.
      </h3>
      <div class="flex gap-3 pt-5">
        <a
          href="https://www.linkedin.com/in/luis-mauricio-palacio-orozco-894896305/"
          target="_blank"
          ><img alt="linkedin icon" src="LinkedinIcon.png" class="w-10" /></a
        >
        <a href="https://github.com/Lalz209" target="_blank"
          ><img alt="github icon" src="GitHubIcon.webp" class="w-10" /></a
        >
      </div>
    </section>

    <Welcome />
    <Skills />
    <Certificates />
    <Proyects />
    <Experience />
    <section id="footer">
    <footer class="text-center py-6 flex justify-between mt-30">
      <h4 class="text-txt text-center py-3 px-6">all Rights reserved 2025</h4>
      <a
        href={mailtoLink}
        class="inline-flex items-center gap-2 text-txt font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-yellow-500 hover:text-white transition-colors duration-300"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="w-5 h-5"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <path
            d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"
          ></path>
          <polyline points="22,6 12,13 2,6"></polyline>
        </svg>
        Contact
      </a>
    </footer>
  </section>
  </div>
</div>

<script>
  const container = document.getElementById("container")!;
  const switchModo = document.getElementById(
    "switch-modo"
  )! as HTMLInputElement;
  const switchDark = document.getElementById(
    "switch-dark"
  )! as HTMLInputElement;
  const switchModoMobile = document.getElementById(
    "switch-modo-mobile"
  )! as HTMLInputElement;
  const switchDarkMobile = document.getElementById(
    "switch-dark-mobile"
  )! as HTMLInputElement;

  // Detectar preferencia inicial del sistema
  const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
  if (prefersDark) {
    container.classList.add("dark-mode");
    switchDark.checked = true;
    switchDarkMobile.checked = true;
  }

  // Cambiar entre Web y CV
  const handleModeChange = () => {
    if (container.classList.contains("web")) {
      container.classList.remove("web");
      container.classList.add("cv");
    } else {
      container.classList.remove("cv");
      container.classList.add("web");
    }
  };
  switchModo.addEventListener("change", handleModeChange);
  switchModoMobile.addEventListener("change", handleModeChange);

  // Cambiar entre Claro y Oscuro
  const handleDarkChange = () => {
    container.classList.toggle("dark-mode");
    switchDark.checked = container.classList.contains("dark-mode");
    switchDarkMobile.checked = container.classList.contains("dark-mode");
  };
  switchDark.addEventListener("change", handleDarkChange);
  switchDarkMobile.addEventListener("change", handleDarkChange);

  
  const sections = document.querySelectorAll("section");
const navIcons = document.querySelectorAll("#navigation-compact a");

console.log("Sections found:", sections);
console.log("Nav icons found:", navIcons);

const observer = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    const id = entry.target.id;
    console.log(`Section ${id} is intersecting: ${entry.isIntersecting}, ratio: ${entry.intersectionRatio}`);
    console.log(entries)
    navIcons.forEach(icon => {
      const href = icon.getAttribute("href");
      const matches = href === `#${id}`;
      if (matches) {
        if (entry.isIntersecting) {
          icon.classList.add("active");
          console.log(`Added active to icon with href=${href}`);
        } else {
          icon.classList.remove("active");
          console.log(`Removed active from icon with href=${href}`);
        }
      }
    });
  });
}, { threshold: 0.1 });

sections.forEach(section => observer.observe(section));
</script>
