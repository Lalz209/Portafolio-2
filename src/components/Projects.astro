---
const projects = [
  {
    images: ["/node-icon.png", "/React-icon.svg.png"],
    title: "Critics",
    programmingLanguages: ["Flask", "Python", "SQLite", "React", "CSS", "HTML"],
    description:
      "Web page where users can comment their opinions about a game, and select if they recommend the gamer, or if they don't",
    status: "In process",
    Features: [
      "Load data to database",
      "Login",
      "Pagination",
      "See information from database rendered",
    ],
    link: "",
  },
  {
    images: ["/game1v1.png"],
    title: "Game 1v1",
    programmingLanguages: ["", "Python"],
    description:
      "Game to be played on console for two players where each player selects weapon, class, and in turns select what actions wants to do until one of both dies",
    status: "Finished",
    Features: [
      "Select role, and weapon",
      "Turns to make options until the other one dies",
    ],
    link: "",
  },
  {
    images: ["/cutencareweb.png", "/cutencarep.png", "/cutencare2.png", "/cutencare3.png"],
    title: "Landing page",
    programmingLanguages: [
      "React",
      "MongoDB",
      "Javascript",
      "CSS",
      "HTML",
      "Node.js",
    ],
    description:
      "landing page where clients can comment about their experience, and see information about the services",
    status: "Finished",
    Features: ["Comment", "See opinions", "Pagination", "Carousel", "Filter"],
    link: "",
  },
  {
    images: ["/portfolio1.png"],
    title: "Portfolio",
    programmingLanguages: [
      "Astro",
      "Javascript",
      "Tailwind",
      "HTML",
      "Node.js",
      "TypeScript partially",
      "",
      "JSX partially",
    ],
    description:
      "Webpage made for my portfolio where any relevant information about myself to find a job with it can be found",
    status: "Finished",
    Features: [
      "Dynamic navbar",
      "Modal",
      "Contact via e-mail",
      "Carousel",
      "Filter",
    ],
    link: "",
  },
];
---

<h2 class="text-txt text-5xl text-center mb-30 font-bold">PROJECTS</h2>
<section
  class="projects grid place-items-center lg:grid-cols-2 md:grid-cols-1 gap-30 mb-50"
  data-projects={JSON.stringify(projects)}
>
  {
    projects.map((pro, index) => (
      <div class="project-card bg-nvbg rounded-lg p-10 shadow-md w-90 flex flex-col gap-5 items-center">
        <img
          src={pro.images[1] || ""}
          alt={pro.title}
          data-index={index}
          class="project-thumbnail w-full h-40 rounded-md cursor-pointer hover:scale-105 transition-transform duration-300 mb-5"
        />

        <h3 class="title text-txt font-bold">{pro.title}</h3>
        <p class="text-txt">{pro.description}</p>
        <h3 class="font-bold text-txt">Languages used:</h3>
        <div class="grid grid-cols-3 gap-3 place-items-center text-center text-span">
          {pro.programmingLanguages.map((leng) => (
            <span>{leng}</span>
          ))}
        </div>
        <h3 class="text-txt font-bold">
          Status: <span class="text-2nd">{pro.status}</span>
        </h3>
        <h3 class="font-bold text-txt">Features</h3>
        <div class="flex flex-col gap-3 text-center text-span">
          {pro.Features.map((fea) => (
            <span class="">{fea}</span>
          ))}
        </div>
      </div>
    ))
  }
</section>

<div class="project-modal fixed inset-0 bg-gray-800 bg-opacity-50 hidden flex items-center justify-center z-50">
  <div class="project-modal-content flex flex-col items-center bg-background p-6 rounded-lg h-[90vh] w-full max-w-[90vw]">
    <h2 class="project-modal-title text-txt text-3xl mb-4"></h2>
    <div class="project-modal-main-image-container w-full h-[70%] overflow-auto items-center mb-10">
      <img class="project-modal-main-image flex justify-self-center" src="" alt="" />
    </div>
    <div class="project-modal-thumbnails flex gap-2 mt-4 overflow-x-auto">
      <!-- Las miniaturas se añadirán dinámicamente con JS -->
    </div>
    <button class="project-close-btn absolute top-4 right-4 bg-gray-700 rounded-full w-8 h-8 flex items-center justify-center cursor-pointer">
      X
    </button>
    <button class="project-prev-btn absolute left-4 top-1/2 transform -translate-y-1/2 text-white bg-white rounded-full w-8 h-8 hidden cursor-pointer flex">
      <img src="left-arrow.svg" class="" />
    </button>
    <button class="project-next-btn absolute right-4 top-1/2 transform -translate-y-1/2 text-white bg-white rounded-full w-8 h-8 hidden cursor-pointer flex">
      <img src="right-arrow.svg" class="" />
    </button>
  </div>
</div>

<script>
  const section = document.querySelector(".projects") as HTMLElement | null;
  if (!section) throw new Error("Element .projects was not found");
  const projects = JSON.parse(section.dataset.projects ?? "[]");
  let projectCurrentIndex = 0;
  let projectCurrentImageIndex = 0;

  const projectThumbnails = document.querySelectorAll(".project-thumbnail");
  const projectModal = document.querySelector(".project-modal") as HTMLElement;
  const projectModalMainImage = document.querySelector(".project-modal-main-image") as HTMLImageElement;
  const projectModalThumbnails = document.querySelector(".project-modal-thumbnails") as HTMLDivElement;
  const projectModalTitle = document.querySelector(".project-modal-title") as HTMLElement;
  const projectCloseBtn = document.querySelector(".project-close-btn") as HTMLButtonElement;
  const projectPrevBtn = document.querySelector(".project-prev-btn") as HTMLButtonElement;
  const projectNextBtn = document.querySelector(".project-next-btn") as HTMLButtonElement;

  projectThumbnails.forEach((thumbnail) => {
    let intervalId: number | null = null;
    const index = parseInt((thumbnail as HTMLElement).dataset.index || "0");
    const projectImages = projects[index].images || [];

    thumbnail.addEventListener("mouseenter", () => {
      if (projectImages.length > 1) {
        let imgIndex = 0;
        intervalId = setInterval(() => {
          imgIndex = (imgIndex + 1) % projectImages.length;
          (thumbnail as HTMLImageElement).src = projectImages[imgIndex];
        }, 1000);
      }
    });

    thumbnail.addEventListener("mouseleave", () => {
      if (intervalId) {
        clearInterval(intervalId);
        intervalId = null;
      }
      (thumbnail as HTMLImageElement).src = projectImages[1] || "";
    });

    thumbnail.addEventListener("click", () => {
      projectCurrentIndex = index;
      projectCurrentImageIndex = 0;
      updateProjectModal();
      projectModal.classList.remove("hidden");
    });
  });

  projectModal.addEventListener("click", (e) => {
    if (e.target === projectModal) projectModal.classList.add("hidden");
  });

  projectCloseBtn.addEventListener("click", () => {
    projectModal.classList.add("hidden");
  });

  projectPrevBtn.addEventListener("click", () => {
    if (projectCurrentIndex > 0) {
      projectCurrentIndex--;
      projectCurrentImageIndex = 0;
      updateProjectModal();
    }
  });

  projectNextBtn.addEventListener("click", () => {
    if (projectCurrentIndex < projects.length - 1) {
      projectCurrentIndex++;
      projectCurrentImageIndex = 0;
      updateProjectModal();
    }
  });

  function updateProjectModal() {
    const project = projects[projectCurrentIndex];

    if (projectModalTitle) {
      projectModalTitle.textContent = project.title;
    }

    if (projectModalMainImage) {
      const images = project.images || [];
      projectModalMainImage.src = images[projectCurrentImageIndex] || "";
      projectModalMainImage.alt = `${project.title} screenshot ${projectCurrentImageIndex + 1}`;
    }

    if (projectModalThumbnails) {
      projectModalThumbnails.innerHTML = "";
      const images = project.images || [];
      images.forEach((imgSrc: string, index: number) => {
        const thumb = document.createElement("img");
        thumb.src = imgSrc;
        thumb.alt = `${project.title} thumbnail ${index + 1}`;
        thumb.className = "w-16 h-16 object-cover cursor-pointer border-2 border-gray-300 hover:border-blue-500";
        thumb.addEventListener("click", () => {
          projectCurrentImageIndex = index;
          updateProjectModal();
        });
        projectModalThumbnails.appendChild(thumb);
      });
    }

    if (projectPrevBtn) {
      projectPrevBtn.classList.toggle("hidden", projectCurrentIndex === 0);
    }
    if (projectNextBtn) {
      projectNextBtn.classList.toggle("hidden", projectCurrentIndex === projects.length - 1);
    }
  }
</script>