---
  import CodeIcon from "./icons/CodeIcon.astro";
  import PythonIcon from "./icons/PythonIcon.astro";
  import FlaskIcon from "./icons/FlaskIcon.astro";
  import ReactIcon from "./icons/ReactIcon.astro";
  import CSSIcon from "./icons/CSSIcon.astro";
  import HTMLIcon from "./icons/HTMLIcon.astro";
  import JavascriptIcon from "./icons/JavascriptIcon.astro";
  import TailwindIcon from "./icons/TailwindIcon.astro";
  import AstroIcon from "./icons/AstroIcon.astro";
  import NodeIcon from "./icons/NodeIcon.astro";
  import ExpressIcon from "./icons/ExpressIcon.astro";
  import MongoIcon from "./icons/MongoIcon.astro";
  import SQLIcon from "./Icons/SQLIcon.astro";
  import JSXIcon from "./icons/JSXIcon.astro";
  import TypeScriptIcon from "./icons/TypescriptIcon.astro";

  const languageIcons = {
    "express": ExpressIcon,
  "transparent.png": null,
  "Python-logo.png": PythonIcon,
  "Flask.svg": FlaskIcon,
  "React-icon.svg.png": ReactIcon,
  "CSS3_logo.png": CSSIcon,
  "html-icon.svg": HTMLIcon,
  "javascript-icon.svg": JavascriptIcon,
  "Tailwind_icon.png": TailwindIcon,
  "astro-seeklogo.png": AstroIcon,
  "node-icon.png": NodeIcon,
  "mongodb.svg": MongoIcon,
  "sql-logo.svg": SQLIcon,
  "jsx-logo.png": JSXIcon,
  "typescript-logo.png": TypeScriptIcon,
};

const projects = [
  {
    images: ["/game.png", "/game1.png", "/game2.png"],
    title: "Game 1v1",
    programmingLanguages: [
      "transparent.png",
      "Python-logo.png",
    ],
    description:
      "Game to be played on console for two players where each player selects weapon, class, and in turns select what actions wants to do until one of both dies",
    status: "Finished",
    Features: [
      "Select role, and weapon",
      "Turns to make options until the other one dies",
    ],
  },
  {
    images: ["/critics.png", "/critics1.png", "/critics2.png", "/critics3.png", "/critics4.png"],
    title: "Critics",
    programmingLanguages: [
      "Flask.svg",
      "Python-logo.png",
      "sql-logo.svg",
      "React-icon.svg.png",
      "CSS3_logo.png",
      "html-icon.svg",
    ],
    description:
      "Web page where users can comment their opinions about a game, and select if they recommend the gamer, or if they don't",
    status: "In process",
    Features: [
      "Load data to database",
      "Login",
      "Pagination",
      "See information from database rendered",
    ],
  },
  {
    images: ["/cutencareweb.png", "/cutencarep.png", "/cutencare2.png", "/cutencare3.png"],
    title: "Landing page",
    programmingLanguages: [
      "React-icon.svg.png",
      "mongodb.svg",
      "javascript-icon.svg",
      "express",
      "html-icon.svg",
      "node-icon.png",
    ],
    description:
      "Landing page where clients can comment about their experience, and see information about the services",
    status: "Finished",
    Features: ["Comment", "See opinions", "Pagination", "Carousel", "Filter"],
  },
  {
    images: ["/wedding.png", "/wedding1.png"],
    title: "Wedding Landing Page",
    programmingLanguages: [
      "javascript-icon.svg",
      "html-icon.svg",
      "jsx-logo.png",
      "CSS3_logo.png",
      "React-icon.svg.png",
    ],
    description:
      "Webpage made for a wedding with different features like send confirmation via e-mail",
    status: "Finished",
    Features: [
      "email confirmation",
      "connected to google sheet",
      "carousel",
      "time in reverse until weeding date",
    ],
  },
  {
    images: ["/portfolio.png", "/portfolio1.png"],
    title: "Portfolio",
    programmingLanguages: [
      "astro-seeklogo.png",
      "javascript-icon.svg",
      "Tailwind_icon.png",
      "html-icon.svg",
      "typescript-logo.png",
      "transparent.png",
    ],
    description:
      "Webpage made for my portfolio where any relevant information about myself to find a job with it can be found",
    status: "Finished",
    Features: [
      "Dynamic navbar",
      "Modal",
      "Contact via e-mail",
      "Carousel",
      "Filter",
    ],
  },
];
---

<section class="projects-section" id="projects-section">
  <div class="ptitle text-txt flex justify-center items-center gap-3 mb-10">
    <CodeIcon class="icons w-20 h-20"/>
    <h2 id="projects" class="section-title text-txt text-5xl text-center font-bold">PROJECTS</h2>
  </div>
  <div
    class="projects grid grid-cols-1 gap-10 mb-50 max-w-7xl mx-auto"
    data-projects={JSON.stringify(projects)}
  >
    {
      projects.map((pro, index) => (
        <div
          class={`project-card bg-nvbg rounded-lg p-6 shadow-md w-[80%] h-80 flex flex-col gap-3 items-center md:h-auto ${
            index % 2 === 0 ? "justify-self-start" : "justify-self-end"
          }`}
        >
          <h3 class="title text-txt font-bold text-lg">{pro.title}</h3>
          <h3 class="text-txt font-bold text-sm">
            Status: <span class="text-2nd">{pro.status}</span>
          </h3>
          
          <div class="flex gap-5 w-[100%] justify-center">
            <img
              src={pro.images[1] || ""}
              alt={pro.title}
              data-index={index}
              class="project-thumbnail w-50 object-fill h-32 rounded-md cursor-pointer hover:scale-105 transition-transform duration-300"
            />
            <div class="items-center text-center w-[50%] flex flex-col justify-center">
              <h3 class="languageusedt font-bold text-txt text-sm mb-5">Languages used:</h3>
              <div class="grid grid-cols-3 gap-2 w-fit justify-items-center text-center">
                {pro.programmingLanguages.map((leng) => {
                  const IconComponent = languageIcons[leng];
                  return IconComponent ? (
                    <IconComponent class="text-txt picon h-10" />
                  ) : null;
                })}
              </div>
            </div>
          </div>
          
          <p class="pdescription text-txt text-sm line-clamp-2 text-center">{pro.description}</p>

          <div class="pfeat w-[100%] flex flex-col items-center gap-5">
            <h3 class="font-bold text-txt text-sm">Features</h3>
            <div class="grid grid-cols-3 gap-2 w-fit justify-items-center text-center text-span">
              {pro.Features.map((fea) => (
                <span>{fea}</span>
              ))}
            </div>
          </div>
        </div>
      ))
    }
  </div>
</section>

<div class="project-modal fixed inset-0 bg-gray-800 bg-opacity-50 hidden flex items-center justify-center z-50">
  <div class="project-modal-content flex flex-col items-center bg-background p-6 rounded-lg h-[90vh] w-full max-w-[90vw]">
    <h2 class="project-modal-title text-txt text-3xl mb-4"></h2>
    <div class="project-modal-main-image-container w-full h-[70%] overflow-auto items-center mb-10">
      <img class="project-modal-main-image flex justify-self-center" src="" alt="" />
    </div>
    <div class="project-modal-thumbnails flex gap-2 mt-4 overflow-x-auto">
      <!-- Las miniaturas se añadirán dinámicamente con JS -->
    </div>
    <button class="project-close-btn absolute top-4 right-4 bg-gray-700 rounded-full w-8 h-8 flex items-center justify-center cursor-pointer">
      X
    </button>
    <button class="project-prev-btn absolute left-4 top-1/2 transform -translate-y-1/2 text-white bg-white rounded-full w-8 h-8 hidden cursor-pointer flex">
      <img src="left-arrow.svg" class="" />
    </button>
    <button class="project-next-btn absolute right-4 top-1/2 transform -translate-y-1/2 text-white bg-white rounded-full w-8 h-8 hidden cursor-pointer flex">
      <img src="right-arrow.svg" class="" />
    </button>
  </div>
</div>

<script>
  const section = document.querySelector(".projects") as HTMLElement | null;
  if (!section) throw new Error("Element .projects was not found");
  const projects = JSON.parse(section.dataset.projects ?? "[]");
  let projectCurrentIndex = 0;
  let projectCurrentImageIndex = 0;

  const projectThumbnails = document.querySelectorAll(".project-thumbnail");
  const projectModal = document.querySelector(".project-modal") as HTMLElement;
  const projectModalMainImage = document.querySelector(".project-modal-main-image") as HTMLImageElement;
  const projectModalThumbnails = document.querySelector(".project-modal-thumbnails") as HTMLDivElement;
  const projectModalTitle = document.querySelector(".project-modal-title") as HTMLElement;
  const projectCloseBtn = document.querySelector(".project-close-btn") as HTMLButtonElement;
  const projectPrevBtn = document.querySelector(".project-prev-btn") as HTMLButtonElement;
  const projectNextBtn = document.querySelector(".project-next-btn") as HTMLButtonElement;

  projectThumbnails.forEach((thumbnail) => {
    let intervalId: number | null = null;
    const index = parseInt((thumbnail as HTMLElement).dataset.index || "0");
    const projectImages = projects[index].images || [];

    thumbnail.addEventListener("mouseenter", () => {
      if (projectImages.length > 1) {
        let imgIndex = 0;
        intervalId = setInterval(() => {
          imgIndex = (imgIndex + 1) % projectImages.length;
          (thumbnail as HTMLImageElement).src = projectImages[imgIndex];
        }, 1000);
      }
    });

    thumbnail.addEventListener("mouseleave", () => {
      if (intervalId) {
        clearInterval(intervalId);
        intervalId = null;
      }
      (thumbnail as HTMLImageElement).src = projectImages[1] || "";
    });

    thumbnail.addEventListener("click", () => {
      projectCurrentIndex = index;
      projectCurrentImageIndex = 0;
      updateProjectModal();
      projectModal.classList.remove("hidden");
    });
  });

  projectModal.addEventListener("click", (e) => {
    if (e.target === projectModal) projectModal.classList.add("hidden");
  });

  projectCloseBtn.addEventListener("click", () => {
    projectModal.classList.add("hidden");
  });

  projectPrevBtn.addEventListener("click", () => {
    if (projectCurrentIndex > 0) {
      projectCurrentIndex--;
      projectCurrentImageIndex = 0;
      updateProjectModal();
    }
  });

  projectNextBtn.addEventListener("click", () => {
    if (projectCurrentIndex < projects.length - 1) {
      projectCurrentIndex++;
      projectCurrentImageIndex = 0;
      updateProjectModal();
    }
  });

  function updateProjectModal() {
    const project = projects[projectCurrentIndex];

    if (projectModalTitle) {
      projectModalTitle.textContent = project.title;
    }

    if (projectModalMainImage) {
      const images = project.images || [];
      projectModalMainImage.src = images[projectCurrentImageIndex] || "";
      projectModalMainImage.alt = `${project.title} screenshot ${projectCurrentImageIndex + 1}`;
    }

    if (projectModalThumbnails) {
      projectModalThumbnails.innerHTML = "";
      const images = project.images || [];
      images.forEach((imgSrc: string, index: number) => {
        const thumb = document.createElement("img");
        thumb.src = imgSrc;
        thumb.alt = `${project.title} thumbnail ${index + 1}`;
        thumb.className = "w-16 h-16 object-cover cursor-pointer border-2 border-gray-300 hover:border-blue-500";
        thumb.addEventListener("click", () => {
          projectCurrentImageIndex = index;
          updateProjectModal();
        });
        projectModalThumbnails.appendChild(thumb);
      });
    }

    if (projectPrevBtn) {
      projectPrevBtn.classList.toggle("hidden", projectCurrentIndex === 0);
    }
    if (projectNextBtn) {
      projectNextBtn.classList.toggle("hidden", projectCurrentIndex === projects.length - 1);
    }
  }
</script>